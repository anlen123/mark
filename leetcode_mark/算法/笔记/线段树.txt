l,r加某数，求，l,r的和

#include <algorithm>
#include <iostream>
#include <cstdio>
#include <cmath>
#include <cstring>
#include <cctype>
#include <queue>
#include <map>
#include <string>
#include <vector>
#include <set>
#include <math.h>
#include <stack>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <time.h>
#define ll long long
#define chushihua(x,y) memset(x,y,sizeof x)
using namespace std;
#define Maxn 110000
int sum = 0;
struct LineTreeNode
{
	int val;
	int add;
	int l, r;
}tree[Maxn * 4];

void pushup(int x)
{
	int temp = x << 1;
	tree[x].val = tree[temp].val + tree[temp + 1].val;
}

void built(int l, int r, int x)
{
	tree[x].l = l;
	tree[x].r = r;
	tree[x].add = 0;
	if (l == r)
	{
		scanf("%d", &tree[x].val);
		return;
	}
	int temp = x << 1;
	int mid = (l + r) >> 1;
	built(l, mid, temp);
	built(mid + 1, r, temp + 1);
	pushup(x);
}
void pushdown(int x)
{
	int temp = x << 1;
	tree[temp].val += tree[x].add * (tree[temp].r - tree[temp].l + 1);
	tree[temp + 1].val += tree[x].add * (tree[temp + 1].r - tree[temp + 1].l + 1);

	tree[temp].add += tree[x].add;
	tree[temp + 1].add += tree[x].add;
	tree[x].add = 0;
}
void query(int l, int r, int L, int R, int x)
{
	if (L > r || R < l)
		return;
	if (L <= l && r <= R)
	{
		sum += tree[x].val;
		return;
	}
	if (tree[x].add)
		pushdown(x);
	int temp = x << 1;
	int mid = (l + r) >> 1;
	query(l, mid, L, R, temp);
	query(mid + 1, r, L, R, temp + 1);
}

void update(int l, int r, int L, int R, int c, int x)
{
	if (L > r || R < l)
		return;
	if (L <= l && r <= R)
	{
		tree[x].val += (r - l + 1) * c;
		tree[x].add += c;
		return;
	}
	if (tree[x].add)
		pushdown(x);
	int temp = x << 1;
	int mid = (l + r) >> 1;
	update(l, mid, L, R, c, temp);
	update(mid + 1, r, L, R, c, temp + 1);
	pushup(x);
}
int main()
{
	int n;
	scanf("%d", &n);
	built(1, n, 1);
	char ss[10];
	while (~scanf("%s", ss)) {
		if (ss[0] == 'E')break;
		else if (ss[0] == 'Q')
		{
			int L, R;
			scanf("%d%d", &L, &R);
			sum = 0;
			query(1, n, L, R, 1);
			printf("%d\n", sum);
		}
		else
		{
			int L, c;
			scanf("%d%d", &L, &c);
			if (ss[0] == 'S') {
				c = -c;
			}
			update(1, n, L, L, c, 1);
		}
	}
	return 0;
}


求最大最小值
#include <algorithm>
#include <cstdio>
#include <cmath>
#include <iostream>
#include <cstring>
#include <cctype>
#include <queue>
#include <map>
#include <string>
#include <vector>
#include <set>
#include <math.h>
#include <stack>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <cstdio>
#include <algorithm>
#define maxx 200010
using namespace std;
int ans;
struct LineTreeNode
{
	int val;

} ltree[maxx * 4];


void PushUp(int x)
{
	int temp = x << 1;
	ltree[x].val = max(ltree[temp].val, ltree[temp + 1].val);
}
void builtSegmentTree(int l, int r, int x)
{
	if (l == r)
		scanf("%d", &ltree[x].val);
	else
	{
		int temp = x << 1;
		int mid = (l + r) >> 1;
		builtSegmentTree(l, mid, temp);
		builtSegmentTree(mid + 1, r, temp + 1);
		PushUp(x);
	}
}
void update(int l, int r, int k, int x)
{
	if (k<l || k>r)
		return;
	if (l == r)
	{
		scanf("%d", &ltree[x].val);
	}
	else
	{
		int temp = x << 1;
		int mid = (l + r) >> 1;
		update(l, mid, k, temp);
		update(mid + 1, r, k, temp + 1);
		PushUp(x);
	}
}
void query(int l, int r, int L, int R, int x)
{
	if (R<l || L>r)
		return;
	if (L <= l && r <= R)
		ans = max(ans, ltree[x].val);
	else
	{
		int temp = x << 1;
		int mid = (l + r) >> 1;
		query(l, mid, L, R, temp);
		query(mid + 1, r, L, R, temp + 1);
	}
}
int main()
{
	int n, q;
	while (~scanf("%d%d", &n, &q)) {
		builtSegmentTree(1, n, 1);
		while (q--)
		{
			char ch;
			cin >> ch;
			if (ch == 'U')
			{
				int kk;
				scanf("%d", &kk);
				update(1, n, kk, 1);
			}
			else
			{
				int l, r;
				scanf("%d%d", &l, &r);
				ans = 0;
				query(1, n, l, r, 1);
				printf("%d\n", ans);
			}
		}
	}
	return 0;
}





第一行包含三个整数N、M、P，分别表示该数列数字的个数、操作的总个数和模数。

第二行包含N个用空格分隔的整数，其中第i个数字表示数列第i项的初始值。

接下来M行每行包含3或4个整数，表示一个操作，具体如下：

操作1： 格式：1 x y k 含义：将区间[x,y]内每个数乘上k

操作2： 格式：2 x y k 含义：将区间[x,y]内每个数加上k

操作3： 格式：3 x y 含义：输出区间[x,y]内每个数的和对P取模所得的结果

#include <iostream>
#include <cstdio>
using namespace std;
//题目中给的p
int p;
//暂存数列的数组
long long a[100007];
//线段树结构体，v表示此时的答案，mul表示乘法意义上的lazytag，add是加法意义上的
struct node{
    long long v, mul, add;
}st[400007];
//buildtree
void bt(int root, int l, int r){
//初始化lazytag
    st[root].mul=1;
    st[root].add=0;
    if(l==r){
        st[root].v=a[l];
    }
    else{
        int m=(l+r)/2;
        bt(root*2, l, m);
        bt(root*2+1, m+1, r);
        st[root].v=st[root*2].v+st[root*2+1].v;
    }
    st[root].v%=p;
    return ;
}
//核心代码，维护lazytag
void pushdown(int root, int l, int r){
    int m=(l+r)/2;
//根据我们规定的优先度，儿子的值=此刻儿子的值*爸爸的乘法lazytag+儿子的区间长度*爸爸的加法lazytag
    st[root*2].v=(st[root*2].v*st[root].mul+st[root].add*(m-l+1))%p;
    st[root*2+1].v=(st[root*2+1].v*st[root].mul+st[root].add*(r-m))%p;
//很好维护的lazytag
    st[root*2].mul=(st[root*2].mul*st[root].mul)%p;
    st[root*2+1].mul=(st[root*2+1].mul*st[root].mul)%p;
    st[root*2].add=(st[root*2].add*st[root].mul+st[root].add)%p;
    st[root*2+1].add=(st[root*2+1].add*st[root].mul+st[root].add)%p;
//把父节点的值初始化
    st[root].mul=1;
    st[root].add=0;
    return ;
}
//update1，乘法，stdl此刻区间的左边，stdr此刻区间的右边，l给出的左边，r给出的右边
void ud1(int root, int stdl, int stdr, int l, int r, long long k){
//假如本区间和给出的区间没有交集
    if(r<stdl || stdr<l){
        return ;
    }
//假如给出的区间包含本区间
    if(l<=stdl && stdr<=r){
        st[root].v=(st[root].v*k)%p;
        st[root].mul=(st[root].mul*k)%p;
        st[root].add=(st[root].add*k)%p;
        return ;
    }
//假如给出的区间和本区间有交集，但是也有不交叉的部分
//先传递lazytag
    pushdown(root, stdl, stdr);
    int m=(stdl+stdr)/2;
    ud1(root*2, stdl, m, l, r, k);
    ud1(root*2+1, m+1, stdr, l, r, k);
    st[root].v=(st[root*2].v+st[root*2+1].v)%p;
    return ;
}
//update2，加法，和乘法同理
void ud2(int root, int stdl, int stdr, int l, int r, long long k){
    if(r<stdl || stdr<l){
        return ;
    }
    if(l<=stdl && stdr<=r){
        st[root].add=(st[root].add+k)%p;
        st[root].v=(st[root].v+k*(stdr-stdl+1))%p;
        return ;
    }
    pushdown(root, stdl, stdr);
    int m=(stdl+stdr)/2;
    ud2(root*2, stdl, m, l, r, k);
    ud2(root*2+1, m+1, stdr, l, r, k);
    st[root].v=(st[root*2].v+st[root*2+1].v)%p;
    return ;
}
//访问，和update一样
long long query(int root, int stdl, int stdr, int l, int r){
    if(r<stdl || stdr<l){
        return 0;
    }
    if(l<=stdl && stdr<=r){
        return st[root].v;
    }
    pushdown(root, stdl, stdr);
    int m=(stdl+stdr)/2;
    return (query(root*2, stdl, m, l, r)+query(root*2+1, m+1, stdr, l, r))%p;
}
int main(){
    int n, m;
    scanf("%d%d%d", &n, &m, &p);
    for(int i=1; i<=n; i++){
        scanf("%lld", &a[i]);
    }
    bt(1, 1, n);
    while(m--){
        int chk;
        scanf("%d", &chk);
        int x, y;
        long long k;
        if(chk==1){
            scanf("%d%d%lld", &x, &y, &k);
            ud1(1, 1, n, x, y, k);
        }
        else if(chk==2){
            scanf("%d%d%lld", &x, &y, &k);
            ud2(1, 1, n, x, y, k);
        }
        else{
            scanf("%d%d", &x, &y);
            printf("%lld\n", query(1, 1, n, x, y));
        }
    }
    return 0;
}

